import{S as Tn,i as qn,s as Gn,k as r,a as p,q as o,l as s,c as u,m as t,r as k,h as l,n as m,p as kn,J as _,b as n,C as i,B as Ze}from"./index-c3577ca2.js";function Nn(pn){let b,$e,Xa,v,xl,B,Ul,Kl,Za,E,Dl,Oa,Wl,Xl,$a,A,F,he,ha,H,Zl,al,Q,Ma,$l,ll,Y,hl,el,j,un='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">inner</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',il,C,ae,nl,V,x,ai,rl,U,le,sl,K,D,li,tl,W,Ta,ee,ol,X,ie,kl,P,mn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">left</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',pl,Z,$,ei,ul,h,ne,ml,aa,la,ii,fl,ea,re,bl,R,fn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">right</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',dl,ia,se,cl,O,bn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ogrenci o <span class="token keyword">right</span> <span class="token keyword">join</span> bolum b  <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',yl,na,te,_l,ra,sa,ni,vl,z,oe,qa,ke,pe,El,M,dn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">left</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">ON</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid <span class="token keyword">where</span> o<span class="token punctuation">.</span>bid <span class="token operator">is</span> <span class="token boolean">null</span></code>',zl,ta,oa,ri,gl,ka,ue,wl,pa,ua,si,Sl,ma,Ga,me,Ll,fa,fe,jl,T,cn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',Pl,ba,be,Rl,q,yn=`<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">left</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid
<span class="token keyword">UNION</span>
<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">right</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>`,Ol,da,de,Ml,ca,ya,ti,Tl,_a,Na,ce,ql,va,ye,Gl,d,g,Ia,_e,ve,Ja,Ee,ze,ge,w,Ba,we,Se,Aa,Le,je,Pe,c,Fa,Re,Oe,Ha,Me,Te,Qa,qe,Ge,Nl,G,_n='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">natural</span> <span class="token keyword">join</span> ogrenci o</code>',Il,N,vn='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">right</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid</code>',Jl,y,Ne,Ya,Ie,Je,Ca,Be,Ae,Bl,I,En='<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bolum b <span class="token keyword">right</span> <span class="token keyword">join</span> ogrenci o <span class="token keyword">on</span> b<span class="token punctuation">.</span>bid <span class="token operator">=</span> o<span class="token punctuation">.</span>bid <span class="token operator">AND</span> o<span class="token punctuation">.</span>adi<span class="token operator">=</span>b<span class="token punctuation">.</span>adi</code>',Al,S,Fe,Ea,He,Qe,Fl,za,Ye,Hl,ga,Ce,Ql,f,Va,wa,Ve,xe,xa,Sa,Ue,Ke,Ua,La,De,We,Ka,ja,Xe;return{c(){b=r("img"),Xa=p(),v=r("p"),xl=o("Önceki "),B=r("a"),Ul=o("iki yazıda"),Kl=o(" SQL’deki temel join sorguları üzerinde durmuştuk. O yazılarda anlatılan join’in en çok kullanılan türü olan inner join’di. Bu yazıda ise genel olarak inner, outer, left, right, full gibi join türlerinin benzer ve farklı yönlerini örneklerle açıklamaya çalışacağım. Eğer join konusuna tamamen yeni iseniz öncelikle ilk iki makaleyi çalışmanızı öneririm."),Za=p(),E=r("p"),Dl=o("Bildiğiniz gibi üzerinde çalıştığımız veritabanları için kullanılan genel isim ”"),Oa=r("strong"),Wl=o("ilişkisel"),Xl=o(" veritabanı”dır. Yani tablolar birbiri ile ilişkilidir ve bu ilişki bir tablodaki birincil anahtar (primary key) ile diğer tablodaki yabancı anahtar (foreign key) üzerinden kurulur. Aşağıdaki okul veritabanında bu tablolar arasındaki ilişkiler açıkça görülüyor."),$a=p(),A=r("p"),F=r("img"),ha=p(),H=r("p"),Zl=o("Join türlerini örneklendirmek için yukarıdaki tablolardan Öğrenci ve Bölüm tablolarını kullanalım:"),al=p(),Q=r("p"),Ma=r("strong"),$l=o("Inner Join"),ll=p(),Y=r("p"),hl=o("Inner join en çok kullanılan join türüdür ve her iki tablodaki ortak kayıtları döndürür. Bir başka ifade ile iki tablonun kesişimini döndürür. Mesela bölüm ve öğrenci tablolarını birleştirmek istersek"),el=p(),j=r("pre"),il=p(),C=r("p"),ae=o("Sorgunun sonuç kümesi aşağıdaki gibi olacaktır."),nl=p(),V=r("p"),x=r("img"),rl=p(),U=r("p"),le=o("Sonuç kümesindeki ilk 4 kolon bölüm tablosunda sonraki 5 kolon ise öğrenci tablosuna aittir. Her iki tablonun bid alanlarına bakarsanız bire-bir eşleştiklerini görürsünüz. Yani sorgu iki tablonun kesişimini döndürmüş oluyor."),sl=p(),K=r("p"),D=r("img"),tl=p(),W=r("p"),Ta=r("strong"),ee=o("Left ve Right Outer join"),ol=p(),X=r("p"),ie=o("Eğer bir tablodaki tüm kayıtlar ile diğer tablodaki birleştirme koşulunu sağlayan kayıtları döndürmek istersek right ve veya left outer join kullanırız. Mesela tüm bölümleri (hiç öğrencisi olmayanlar da dahil) ve bir bölüme kayıtlı öğrencileri sorgulamak istersek:"),kl=p(),P=r("pre"),pl=p(),Z=r("p"),$=r("img"),ul=p(),h=r("p"),ne=o("Son kayıda dikkat ederseniz hiç öğrencisi olmayan bölüm de sonuç kümesinde mevcut.  Yani soldaki tablodan (bölüm) tüm kayıtlar, sağdaki tablodan ise sadece kesişen kayıtlar gelmiş oldu."),ml=p(),aa=r("p"),la=r("img"),fl=p(),ea=r("p"),re=o("Yukarıdaki sorguyuda  left (sol) yerine right (sağ) sözcüğünü kullanmış olsaydık, tüm öğrenciler ile en az bir öğrencisi olan bölümler seçilirdi. Yani left ve right tüm kayıtların seçileceği tablonun sağdaki mi yoksa soldaki mi olacağını belirtiyor yalnzıca."),bl=p(),R=r("pre"),dl=p(),ia=r("p"),se=o("Bu sorguda tabloların yerini değiştirisek tekrar tüm bölümleri ve bir bölüme kayıtlı öğrencileri seçmiş oluruz."),cl=p(),O=r("pre"),yl=p(),na=r("p"),te=o("Sadece sonuç kümesinde tabloların yeri değişmiş olur. Aşağıda görüldüğü gibi:"),_l=p(),ra=r("p"),sa=r("img"),vl=p(),z=r("p"),oe=o("Eğer yalnızca hiç öğrencisi olmayan bölümleri seçmek istersek "),qa=r("strong"),ke=o("where"),pe=o(" ifadesi ile öğrenci tablosundaki tüm kayıtları aşağıdaki gibi eleyebiliriz."),El=p(),M=r("pre"),zl=p(),ta=r("p"),oa=r("img"),gl=p(),ka=r("p"),ue=o("Yaptığımız işlemi Venn şeması ile gösterecek olursak:"),wl=p(),pa=r("p"),ua=r("img"),Sl=p(),ma=r("p"),Ga=r("strong"),me=o("Full Outer Join"),Ll=p(),fa=r("p"),fe=o("Tüm öğrencileri ve tüm bölümleri seçmek istersek full outer  join kullanırız."),jl=p(),T=r("pre"),Pl=p(),ba=r("p"),be=o("Full outer join çok da gerekli olmadığından MySQL’de mevcut değildir. Ancak aşağıdaki gibi bir sorgu ile (union kullanarak) aynı sonuç elde edilebilir."),Rl=p(),q=r("pre"),Ol=p(),da=r("p"),de=o("Yaptığımız işlemi Venn şeması ile gösterecek olursak:"),Ml=p(),ca=r("p"),ya=r("img"),Tl=p(),_a=r("p"),Na=r("strong"),ce=o("Sintaks"),ql=p(),va=r("p"),ye=o("SQL join sintaksı ile ilgili olarak şunları hatırlatmakta yarar var."),Gl=p(),d=r("ul"),g=r("li"),Ia=r("strong"),_e=o("Inner Join"),ve=o(" yerine sadece "),Ja=r("strong"),Ee=o("Join"),ze=o(" yazmamız yeterli"),ge=p(),w=r("li"),Ba=r("strong"),we=o("Left Outer Join"),Se=o(" yerine sadece "),Aa=r("strong"),Le=o("Left Join"),je=o(" yazmamız yeterli"),Pe=p(),c=r("li"),Fa=r("strong"),Re=o("Right Outer Join"),Oe=o(" yerine sadece "),Ha=r("strong"),Me=o("Right Join"),Te=o(" yazmamız yeterli "),Qa=r("strong"),qe=o("Natural Join"),Ge=o(" Bir de natural join var ki yazımda kolaylık sağladığı için öğrenciler tarafından tercih edilebiliyor.  Mesela aşağıdaki iki sorgu aynı işi yapar:"),Nl=p(),G=r("pre"),Il=p(),N=r("pre"),Jl=p(),y=r("p"),Ne=o("Ancak gerçek hayatta Natural Join kullanımı sakıncalıdır.  Çünkü Natural Join iki tablodaki aynı isme sahip tüm alanların (kolonların) eşleşip eşleşmediğine bakar. Öğrenci ve Bölüm tablolarında sadece bid alanları aynı isme sahip olduğundan bir problem çıkarmıyor ancak Bölüm tablosunda bölümün ismini tutan için "),Ya=r("strong"),Ie=o("badi"),Je=o(" alanı "),Ca=r("strong"),Be=o("adi"),Ae=o(" şeklinde isimlendirilseydi Öğrenci tablosunda da aynı isimli bir alan bulunduğundan sorgu bu kez aşağıdaki sorgu ile eşdeğer olacaktı."),Bl=p(),I=r("pre"),Al=p(),S=r("p"),Fe=o("Kısacası natural join sorgusunda tam olarak hangi alanların karşılaştırıldığı belli değildir ve bu hata riskini artırtığı için profesyoneller tarafından tercih edilmez. "),Ea=r("a"),He=o("Buradan"),Qe=o(" okul veritabanını indirerek bu ve benzeri sorguları denemenizi öneririm. Umarım bu yazı sizler için faydalı olmuştur."),Fl=p(),za=r("p"),Ye=o("Herkese kolay gelsin"),Hl=p(),ga=r("h3"),Ce=o("İlgili Diğer Makaleler"),Ql=p(),f=r("ul"),Va=r("li"),wa=r("a"),Ve=o("SQL 14: Kümeleme Fonksiyonları"),xe=p(),xa=r("li"),Sa=r("a"),Ue=o("SQL 15: GROUP BY İfadesi"),Ke=p(),Ua=r("li"),La=r("a"),De=o("SQL 16: HAVING İfadesi"),We=p(),Ka=r("li"),ja=r("a"),Xe=o("SQL 17: Örnek Okul Veritabanı"),this.h()},l(a){b=s(a,"IMG",{align:!0,style:!0,src:!0}),Xa=u(a),v=s(a,"P",{});var e=t(v);xl=k(e,"Önceki "),B=s(e,"A",{href:!0});var oi=t(B);Ul=k(oi,"iki yazıda"),oi.forEach(l),Kl=k(e," SQL’deki temel join sorguları üzerinde durmuştuk. O yazılarda anlatılan join’in en çok kullanılan türü olan inner join’di. Bu yazıda ise genel olarak inner, outer, left, right, full gibi join türlerinin benzer ve farklı yönlerini örneklerle açıklamaya çalışacağım. Eğer join konusuna tamamen yeni iseniz öncelikle ilk iki makaleyi çalışmanızı öneririm."),e.forEach(l),Za=u(a),E=s(a,"P",{});var Yl=t(E);Dl=k(Yl,"Bildiğiniz gibi üzerinde çalıştığımız veritabanları için kullanılan genel isim ”"),Oa=s(Yl,"STRONG",{});var ki=t(Oa);Wl=k(ki,"ilişkisel"),ki.forEach(l),Xl=k(Yl," veritabanı”dır. Yani tablolar birbiri ile ilişkilidir ve bu ilişki bir tablodaki birincil anahtar (primary key) ile diğer tablodaki yabancı anahtar (foreign key) üzerinden kurulur. Aşağıdaki okul veritabanında bu tablolar arasındaki ilişkiler açıkça görülüyor."),Yl.forEach(l),$a=u(a),A=s(a,"P",{});var pi=t(A);F=s(pi,"IMG",{src:!0,alt:!0}),pi.forEach(l),ha=u(a),H=s(a,"P",{});var ui=t(H);Zl=k(ui,"Join türlerini örneklendirmek için yukarıdaki tablolardan Öğrenci ve Bölüm tablolarını kullanalım:"),ui.forEach(l),al=u(a),Q=s(a,"P",{});var mi=t(Q);Ma=s(mi,"STRONG",{});var fi=t(Ma);$l=k(fi,"Inner Join"),fi.forEach(l),mi.forEach(l),ll=u(a),Y=s(a,"P",{});var bi=t(Y);hl=k(bi,"Inner join en çok kullanılan join türüdür ve her iki tablodaki ortak kayıtları döndürür. Bir başka ifade ile iki tablonun kesişimini döndürür. Mesela bölüm ve öğrenci tablolarını birleştirmek istersek"),bi.forEach(l),el=u(a),j=s(a,"PRE",{class:!0});var zn=t(j);zn.forEach(l),il=u(a),C=s(a,"P",{});var di=t(C);ae=k(di,"Sorgunun sonuç kümesi aşağıdaki gibi olacaktır."),di.forEach(l),nl=u(a),V=s(a,"P",{});var ci=t(V);x=s(ci,"IMG",{src:!0,alt:!0}),ci.forEach(l),rl=u(a),U=s(a,"P",{});var yi=t(U);le=k(yi,"Sonuç kümesindeki ilk 4 kolon bölüm tablosunda sonraki 5 kolon ise öğrenci tablosuna aittir. Her iki tablonun bid alanlarına bakarsanız bire-bir eşleştiklerini görürsünüz. Yani sorgu iki tablonun kesişimini döndürmüş oluyor."),yi.forEach(l),sl=u(a),K=s(a,"P",{});var _i=t(K);D=s(_i,"IMG",{src:!0,alt:!0}),_i.forEach(l),tl=u(a),W=s(a,"P",{});var vi=t(W);Ta=s(vi,"STRONG",{});var Ei=t(Ta);ee=k(Ei,"Left ve Right Outer join"),Ei.forEach(l),vi.forEach(l),ol=u(a),X=s(a,"P",{});var zi=t(X);ie=k(zi,"Eğer bir tablodaki tüm kayıtlar ile diğer tablodaki birleştirme koşulunu sağlayan kayıtları döndürmek istersek right ve veya left outer join kullanırız. Mesela tüm bölümleri (hiç öğrencisi olmayanlar da dahil) ve bir bölüme kayıtlı öğrencileri sorgulamak istersek:"),zi.forEach(l),kl=u(a),P=s(a,"PRE",{class:!0});var gn=t(P);gn.forEach(l),pl=u(a),Z=s(a,"P",{});var gi=t(Z);$=s(gi,"IMG",{src:!0,alt:!0}),gi.forEach(l),ul=u(a),h=s(a,"P",{});var wi=t(h);ne=k(wi,"Son kayıda dikkat ederseniz hiç öğrencisi olmayan bölüm de sonuç kümesinde mevcut.  Yani soldaki tablodan (bölüm) tüm kayıtlar, sağdaki tablodan ise sadece kesişen kayıtlar gelmiş oldu."),wi.forEach(l),ml=u(a),aa=s(a,"P",{});var Si=t(aa);la=s(Si,"IMG",{src:!0,alt:!0}),Si.forEach(l),fl=u(a),ea=s(a,"P",{});var Li=t(ea);re=k(Li,"Yukarıdaki sorguyuda  left (sol) yerine right (sağ) sözcüğünü kullanmış olsaydık, tüm öğrenciler ile en az bir öğrencisi olan bölümler seçilirdi. Yani left ve right tüm kayıtların seçileceği tablonun sağdaki mi yoksa soldaki mi olacağını belirtiyor yalnzıca."),Li.forEach(l),bl=u(a),R=s(a,"PRE",{class:!0});var wn=t(R);wn.forEach(l),dl=u(a),ia=s(a,"P",{});var ji=t(ia);se=k(ji,"Bu sorguda tabloların yerini değiştirisek tekrar tüm bölümleri ve bir bölüme kayıtlı öğrencileri seçmiş oluruz."),ji.forEach(l),cl=u(a),O=s(a,"PRE",{class:!0});var Sn=t(O);Sn.forEach(l),yl=u(a),na=s(a,"P",{});var Pi=t(na);te=k(Pi,"Sadece sonuç kümesinde tabloların yeri değişmiş olur. Aşağıda görüldüğü gibi:"),Pi.forEach(l),_l=u(a),ra=s(a,"P",{});var Ri=t(ra);sa=s(Ri,"IMG",{src:!0,alt:!0}),Ri.forEach(l),vl=u(a),z=s(a,"P",{});var Cl=t(z);oe=k(Cl,"Eğer yalnızca hiç öğrencisi olmayan bölümleri seçmek istersek "),qa=s(Cl,"STRONG",{});var Oi=t(qa);ke=k(Oi,"where"),Oi.forEach(l),pe=k(Cl," ifadesi ile öğrenci tablosundaki tüm kayıtları aşağıdaki gibi eleyebiliriz."),Cl.forEach(l),El=u(a),M=s(a,"PRE",{class:!0});var Ln=t(M);Ln.forEach(l),zl=u(a),ta=s(a,"P",{});var Mi=t(ta);oa=s(Mi,"IMG",{src:!0,alt:!0}),Mi.forEach(l),gl=u(a),ka=s(a,"P",{});var Ti=t(ka);ue=k(Ti,"Yaptığımız işlemi Venn şeması ile gösterecek olursak:"),Ti.forEach(l),wl=u(a),pa=s(a,"P",{});var qi=t(pa);ua=s(qi,"IMG",{src:!0,alt:!0}),qi.forEach(l),Sl=u(a),ma=s(a,"P",{});var Gi=t(ma);Ga=s(Gi,"STRONG",{});var Ni=t(Ga);me=k(Ni,"Full Outer Join"),Ni.forEach(l),Gi.forEach(l),Ll=u(a),fa=s(a,"P",{});var Ii=t(fa);fe=k(Ii,"Tüm öğrencileri ve tüm bölümleri seçmek istersek full outer  join kullanırız."),Ii.forEach(l),jl=u(a),T=s(a,"PRE",{class:!0});var jn=t(T);jn.forEach(l),Pl=u(a),ba=s(a,"P",{});var Ji=t(ba);be=k(Ji,"Full outer join çok da gerekli olmadığından MySQL’de mevcut değildir. Ancak aşağıdaki gibi bir sorgu ile (union kullanarak) aynı sonuç elde edilebilir."),Ji.forEach(l),Rl=u(a),q=s(a,"PRE",{class:!0});var Pn=t(q);Pn.forEach(l),Ol=u(a),da=s(a,"P",{});var Bi=t(da);de=k(Bi,"Yaptığımız işlemi Venn şeması ile gösterecek olursak:"),Bi.forEach(l),Ml=u(a),ca=s(a,"P",{});var Ai=t(ca);ya=s(Ai,"IMG",{src:!0,alt:!0}),Ai.forEach(l),Tl=u(a),_a=s(a,"P",{});var Fi=t(_a);Na=s(Fi,"STRONG",{});var Hi=t(Na);ce=k(Hi,"Sintaks"),Hi.forEach(l),Fi.forEach(l),ql=u(a),va=s(a,"P",{});var Qi=t(va);ye=k(Qi,"SQL join sintaksı ile ilgili olarak şunları hatırlatmakta yarar var."),Qi.forEach(l),Gl=u(a),d=s(a,"UL",{});var Pa=t(d);g=s(Pa,"LI",{});var Da=t(g);Ia=s(Da,"STRONG",{});var Yi=t(Ia);_e=k(Yi,"Inner Join"),Yi.forEach(l),ve=k(Da," yerine sadece "),Ja=s(Da,"STRONG",{});var Ci=t(Ja);Ee=k(Ci,"Join"),Ci.forEach(l),ze=k(Da," yazmamız yeterli"),Da.forEach(l),ge=u(Pa),w=s(Pa,"LI",{});var Wa=t(w);Ba=s(Wa,"STRONG",{});var Vi=t(Ba);we=k(Vi,"Left Outer Join"),Vi.forEach(l),Se=k(Wa," yerine sadece "),Aa=s(Wa,"STRONG",{});var xi=t(Aa);Le=k(xi,"Left Join"),xi.forEach(l),je=k(Wa," yazmamız yeterli"),Wa.forEach(l),Pe=u(Pa),c=s(Pa,"LI",{});var J=t(c);Fa=s(J,"STRONG",{});var Ui=t(Fa);Re=k(Ui,"Right Outer Join"),Ui.forEach(l),Oe=k(J," yerine sadece "),Ha=s(J,"STRONG",{});var Ki=t(Ha);Me=k(Ki,"Right Join"),Ki.forEach(l),Te=k(J," yazmamız yeterli "),Qa=s(J,"STRONG",{});var Di=t(Qa);qe=k(Di,"Natural Join"),Di.forEach(l),Ge=k(J," Bir de natural join var ki yazımda kolaylık sağladığı için öğrenciler tarafından tercih edilebiliyor.  Mesela aşağıdaki iki sorgu aynı işi yapar:"),J.forEach(l),Pa.forEach(l),Nl=u(a),G=s(a,"PRE",{class:!0});var Rn=t(G);Rn.forEach(l),Il=u(a),N=s(a,"PRE",{class:!0});var On=t(N);On.forEach(l),Jl=u(a),y=s(a,"P",{});var Ra=t(y);Ne=k(Ra,"Ancak gerçek hayatta Natural Join kullanımı sakıncalıdır.  Çünkü Natural Join iki tablodaki aynı isme sahip tüm alanların (kolonların) eşleşip eşleşmediğine bakar. Öğrenci ve Bölüm tablolarında sadece bid alanları aynı isme sahip olduğundan bir problem çıkarmıyor ancak Bölüm tablosunda bölümün ismini tutan için "),Ya=s(Ra,"STRONG",{});var Wi=t(Ya);Ie=k(Wi,"badi"),Wi.forEach(l),Je=k(Ra," alanı "),Ca=s(Ra,"STRONG",{});var Xi=t(Ca);Be=k(Xi,"adi"),Xi.forEach(l),Ae=k(Ra," şeklinde isimlendirilseydi Öğrenci tablosunda da aynı isimli bir alan bulunduğundan sorgu bu kez aşağıdaki sorgu ile eşdeğer olacaktı."),Ra.forEach(l),Bl=u(a),I=s(a,"PRE",{class:!0});var Mn=t(I);Mn.forEach(l),Al=u(a),S=s(a,"P",{});var Vl=t(S);Fe=k(Vl,"Kısacası natural join sorgusunda tam olarak hangi alanların karşılaştırıldığı belli değildir ve bu hata riskini artırtığı için profesyoneller tarafından tercih edilmez. "),Ea=s(Vl,"A",{href:!0});var Zi=t(Ea);He=k(Zi,"Buradan"),Zi.forEach(l),Qe=k(Vl," okul veritabanını indirerek bu ve benzeri sorguları denemenizi öneririm. Umarım bu yazı sizler için faydalı olmuştur."),Vl.forEach(l),Fl=u(a),za=s(a,"P",{});var $i=t(za);Ye=k($i,"Herkese kolay gelsin"),$i.forEach(l),Hl=u(a),ga=s(a,"H3",{});var hi=t(ga);Ce=k(hi,"İlgili Diğer Makaleler"),hi.forEach(l),Ql=u(a),f=s(a,"UL",{});var L=t(f);Va=s(L,"LI",{});var an=t(Va);wa=s(an,"A",{href:!0});var ln=t(wa);Ve=k(ln,"SQL 14: Kümeleme Fonksiyonları"),ln.forEach(l),an.forEach(l),xe=u(L),xa=s(L,"LI",{});var en=t(xa);Sa=s(en,"A",{href:!0});var nn=t(Sa);Ue=k(nn,"SQL 15: GROUP BY İfadesi"),nn.forEach(l),en.forEach(l),Ke=u(L),Ua=s(L,"LI",{});var rn=t(Ua);La=s(rn,"A",{href:!0});var sn=t(La);De=k(sn,"SQL 16: HAVING İfadesi"),sn.forEach(l),rn.forEach(l),We=u(L),Ka=s(L,"LI",{});var tn=t(Ka);ja=s(tn,"A",{href:!0});var on=t(ja);Xe=k(on,"SQL 17: Örnek Okul Veritabanı"),on.forEach(l),tn.forEach(l),L.forEach(l),this.h()},h(){m(b,"align","left"),kn(b,"margin-right","30px"),kn(b,"margin-bottom","0px"),_(b.src,$e="img/blog/Schema-SQL1.jpg")||m(b,"src",$e),m(B,"href","/sql-12-sorguda-birden-fazla-tablo-kullanma-join-1"),_(F.src,he="/img/blog/okul_vt_hrzafer.png")||m(F,"src",he),m(F,"alt","okul_vt_hrzafer"),m(j,"class","language-sql"),_(x.src,ai="/img/blog/bolum_ogrenci_inner.png")||m(x,"src",ai),m(x,"alt","bolum_ogrenci_inner"),_(D.src,li="/img/blog/k%C3%BCmeler_inner.png")||m(D,"src",li),m(D,"alt","kümeler_inner"),m(P,"class","language-sql"),_($.src,ei="/img/blog/bolum_ogrenci_left_outer.png")||m($,"src",ei),m($,"alt","bolum_ogrenci_left_outer"),_(la.src,ii="/img/blog/kumeler_left_outer.png")||m(la,"src",ii),m(la,"alt","kumeler_left_outer"),m(R,"class","language-sql"),m(O,"class","language-sql"),_(sa.src,ni="/img/blog/bolum_ogrenci_right_outer.png")||m(sa,"src",ni),m(sa,"alt","bolum_ogrenci_right_outer"),m(M,"class","language-sql"),_(oa.src,ri="/img/blog/bolum_ogrenci_left_only.png")||m(oa,"src",ri),m(oa,"alt","bolum_ogrenci_left_only"),_(ua.src,si="/img/blog/kumeler_left_only.png")||m(ua,"src",si),m(ua,"alt","kumeler_left_only"),m(T,"class","language-sql"),m(q,"class","language-sql"),_(ya.src,ti="/img/blog/kumeler_full_outer.png")||m(ya,"src",ti),m(ya,"alt","kumeler_full_outer"),m(G,"class","language-sql"),m(N,"class","language-sql"),m(I,"class","language-sql"),m(Ea,"href","/sql-17-ornek-okul-veritabani"),m(wa,"href","/sql-14-kumeleme-fonksiyonlari"),m(Sa,"href","/sql-15-group-by-ifadesi"),m(La,"href","/sql-16-having-ifadesi"),m(ja,"href","/sql-17-ornek-okul-veritabani")},m(a,e){n(a,b,e),n(a,Xa,e),n(a,v,e),i(v,xl),i(v,B),i(B,Ul),i(v,Kl),n(a,Za,e),n(a,E,e),i(E,Dl),i(E,Oa),i(Oa,Wl),i(E,Xl),n(a,$a,e),n(a,A,e),i(A,F),n(a,ha,e),n(a,H,e),i(H,Zl),n(a,al,e),n(a,Q,e),i(Q,Ma),i(Ma,$l),n(a,ll,e),n(a,Y,e),i(Y,hl),n(a,el,e),n(a,j,e),j.innerHTML=un,n(a,il,e),n(a,C,e),i(C,ae),n(a,nl,e),n(a,V,e),i(V,x),n(a,rl,e),n(a,U,e),i(U,le),n(a,sl,e),n(a,K,e),i(K,D),n(a,tl,e),n(a,W,e),i(W,Ta),i(Ta,ee),n(a,ol,e),n(a,X,e),i(X,ie),n(a,kl,e),n(a,P,e),P.innerHTML=mn,n(a,pl,e),n(a,Z,e),i(Z,$),n(a,ul,e),n(a,h,e),i(h,ne),n(a,ml,e),n(a,aa,e),i(aa,la),n(a,fl,e),n(a,ea,e),i(ea,re),n(a,bl,e),n(a,R,e),R.innerHTML=fn,n(a,dl,e),n(a,ia,e),i(ia,se),n(a,cl,e),n(a,O,e),O.innerHTML=bn,n(a,yl,e),n(a,na,e),i(na,te),n(a,_l,e),n(a,ra,e),i(ra,sa),n(a,vl,e),n(a,z,e),i(z,oe),i(z,qa),i(qa,ke),i(z,pe),n(a,El,e),n(a,M,e),M.innerHTML=dn,n(a,zl,e),n(a,ta,e),i(ta,oa),n(a,gl,e),n(a,ka,e),i(ka,ue),n(a,wl,e),n(a,pa,e),i(pa,ua),n(a,Sl,e),n(a,ma,e),i(ma,Ga),i(Ga,me),n(a,Ll,e),n(a,fa,e),i(fa,fe),n(a,jl,e),n(a,T,e),T.innerHTML=cn,n(a,Pl,e),n(a,ba,e),i(ba,be),n(a,Rl,e),n(a,q,e),q.innerHTML=yn,n(a,Ol,e),n(a,da,e),i(da,de),n(a,Ml,e),n(a,ca,e),i(ca,ya),n(a,Tl,e),n(a,_a,e),i(_a,Na),i(Na,ce),n(a,ql,e),n(a,va,e),i(va,ye),n(a,Gl,e),n(a,d,e),i(d,g),i(g,Ia),i(Ia,_e),i(g,ve),i(g,Ja),i(Ja,Ee),i(g,ze),i(d,ge),i(d,w),i(w,Ba),i(Ba,we),i(w,Se),i(w,Aa),i(Aa,Le),i(w,je),i(d,Pe),i(d,c),i(c,Fa),i(Fa,Re),i(c,Oe),i(c,Ha),i(Ha,Me),i(c,Te),i(c,Qa),i(Qa,qe),i(c,Ge),n(a,Nl,e),n(a,G,e),G.innerHTML=_n,n(a,Il,e),n(a,N,e),N.innerHTML=vn,n(a,Jl,e),n(a,y,e),i(y,Ne),i(y,Ya),i(Ya,Ie),i(y,Je),i(y,Ca),i(Ca,Be),i(y,Ae),n(a,Bl,e),n(a,I,e),I.innerHTML=En,n(a,Al,e),n(a,S,e),i(S,Fe),i(S,Ea),i(Ea,He),i(S,Qe),n(a,Fl,e),n(a,za,e),i(za,Ye),n(a,Hl,e),n(a,ga,e),i(ga,Ce),n(a,Ql,e),n(a,f,e),i(f,Va),i(Va,wa),i(wa,Ve),i(f,xe),i(f,xa),i(xa,Sa),i(Sa,Ue),i(f,Ke),i(f,Ua),i(Ua,La),i(La,De),i(f,We),i(f,Ka),i(Ka,ja),i(ja,Xe)},p:Ze,i:Ze,o:Ze,d(a){a&&l(b),a&&l(Xa),a&&l(v),a&&l(Za),a&&l(E),a&&l($a),a&&l(A),a&&l(ha),a&&l(H),a&&l(al),a&&l(Q),a&&l(ll),a&&l(Y),a&&l(el),a&&l(j),a&&l(il),a&&l(C),a&&l(nl),a&&l(V),a&&l(rl),a&&l(U),a&&l(sl),a&&l(K),a&&l(tl),a&&l(W),a&&l(ol),a&&l(X),a&&l(kl),a&&l(P),a&&l(pl),a&&l(Z),a&&l(ul),a&&l(h),a&&l(ml),a&&l(aa),a&&l(fl),a&&l(ea),a&&l(bl),a&&l(R),a&&l(dl),a&&l(ia),a&&l(cl),a&&l(O),a&&l(yl),a&&l(na),a&&l(_l),a&&l(ra),a&&l(vl),a&&l(z),a&&l(El),a&&l(M),a&&l(zl),a&&l(ta),a&&l(gl),a&&l(ka),a&&l(wl),a&&l(pa),a&&l(Sl),a&&l(ma),a&&l(Ll),a&&l(fa),a&&l(jl),a&&l(T),a&&l(Pl),a&&l(ba),a&&l(Rl),a&&l(q),a&&l(Ol),a&&l(da),a&&l(Ml),a&&l(ca),a&&l(Tl),a&&l(_a),a&&l(ql),a&&l(va),a&&l(Gl),a&&l(d),a&&l(Nl),a&&l(G),a&&l(Il),a&&l(N),a&&l(Jl),a&&l(y),a&&l(Bl),a&&l(I),a&&l(Al),a&&l(S),a&&l(Fl),a&&l(za),a&&l(Hl),a&&l(ga),a&&l(Ql),a&&l(f)}}}const Jn={title:"SQL 18: Join Türleri",date:"2013-01-22",subtitle:"Önceki iki yazıda SQL'deki temel join sorguları üzerinde durmuştuk. O yazılarda anlatılan join'in en çok kullanılan türü olan inner join'di."};class Bn extends Tn{constructor(b){super(),qn(this,b,null,Nn,Gn,{})}}export{Bn as default,Jn as metadata};
