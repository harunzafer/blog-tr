import{S as aa,i as na,s as sa,k as i,a as t,q as c,l as r,c as o,m as p,r as u,h as a,n as d,p as Ye,O as le,b as s,C as l,B as we}from"./index-9681ceb5.js";function ia(qe){let k,Oe,G,P,pe,R,g,te,X,j,x,Se,Y,w,D,Ce,q,O,L,Te,K,f,ce,M,oe,ue,U,b,ke,N,me,de,F,y,Ke=`<code class="language-java"><span class="token comment">/* 
 * Yapıcı fonksiyonu overload ediyoruz. Burada kendisini çağıran (açan) pencerenin referansını parametre olarak alıyor.
 */</span>
<span class="token keyword">private</span> <span class="token class-name">AnaPencere</span> ataPencere<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CocukPencere</span><span class="token punctuation">(</span><span class="token class-name">AnaPencere</span> ata<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>ataPencere <span class="token operator">=</span> ata<span class="token punctuation">;</span>
   <span class="token function">initComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bu metod pencere üzerindeki buton, etiket,</span>
                     <span class="token comment">//metin kutusu vb. bileşenleri ilklendirir.</span>
<span class="token punctuation">&#125;</span></code>`,V,S,fe,W,C,be,Q,v,Ue='<code class="language-java"><span class="token keyword">new</span> <span class="token class-name">CocukPencere</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Z,T,ye,$,_,Fe='<code class="language-java">ataPencere<span class="token punctuation">.</span><span class="token function">getAnaYaziLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>anaTextField<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',h,B,ve,ee,E,Ve=`<code class="language-undefined">EXIT_ON_CLOSE // tüm programı kapat

DISPOSE // Sadece ilgili pencereyi kapat

HIDE // pencereyi gizle

DO_NOTHING // hiç birşey yapma</code>`,ae,m,_e,H,Ee,ze,J,Pe,ge,ne,z,We='<code class="language-java"><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span>WindowConstants</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',se,I,je;return{c(){k=i("img"),G=t(),P=i("p"),pe=c("Java’da swing ile birden fazla pencere kullanan herkesin aklına “bir pencereden diğerini nasıl kontrol edebilirim” sorusu gelmiştir her halde. Bu yazıda bunu örneklemeye çalışacağım. Birbiri ile bağlantılı 3 pencere olacak projemizde. Bunları ana pencere, çocuk pencere ve torun pencere olarak isimlendirelim. Tahmin edebileceğiniz gibi ana pencere’de bir butona basıldığında çocuk pencere, çocuk pencerede bir butona basıldığında torun pencere açılacak."),R=t(),g=i("p"),te=c("Bunlara ek olarak çocuk pencereden ana pencere üzerindeki bir yazıyı değiştireceğiz. Ayrıca torun pencere üzerinden hem ana hem de çocuk pencere üzerindeki yazıları değiştireceğiz. Programın ekran görünümü aşağıdaki gibi olacak."),X=t(),j=i("p"),x=i("img"),Y=t(),w=i("p"),D=i("img"),q=t(),O=i("p"),L=i("img"),K=t(),f=i("p"),ce=c("Kavram kargaşasını önlemek için bir pencereyi açan pencereye, o pencerenin "),M=i("strong"),oe=c("ata"),ue=c("sı (parent) diyelim. O halde bu örnekte ana pencere çocuk pencerenin atası, çocuk pencere de torun pencerenin atası olur."),U=t(),b=i("p"),ke=c("Java’da pencereler arası iletişimi sağlamanın en genel yolu ata pencerenin referansını çocuk pencerenin yapıcı fonksiyonuna parametre olarak vermektir. Aşağıdaki koda bakalım: "),N=i("code"),me=c("CocukPencere.java"),de=c(" sınıfından bir kod kesimi:"),F=t(),y=i("pre"),V=t(),S=i("h3"),fe=c("AnaPencere.java"),W=t(),C=i("p"),be=c("sınıfında çocuk pencerenin açıldığı kod kesimi:"),Q=t(),v=i("pre"),Z=t(),T=i("p"),ye=c("Çocuk pencereden ana pencere üzerindeki yazının değiştirildiği kod kesimi:"),$=t(),_=i("pre"),h=t(),B=i("p"),ve=c("Son olarak şunu hatırlatmakta fayda var. Bir pencererin kapama simgesine tıklanıldığında aşağıdakilerden biri yapılır."),ee=t(),E=i("pre"),ae=t(),m=i("p"),_e=c("Bu projede Ana pencere için bu ayar "),H=i("code"),Ee=c("EXIT_ON_CLOSE"),ze=c(" şeklinde. Yani ana pencere kapandığında tüm pencereler kapanıyor ve program sonlanıyor. Diğer pencereler için ise "),J=i("code"),Pe=c("DISPOSE"),ge=c(" olarak ayarlı. Pencereleri Netbeans’te çizerek oluşturuyorsanız bu ayarı properties penceresi üzerinden yapmanız gerekiyor. Eğer doğrudan kodluyorsanız ilgili kod aşağıdaki gibidir."),ne=t(),z=i("pre"),se=t(),I=i("p"),je=c("Umarım faydalı olmuştur, herkese iyi çalışmalar."),this.h()},l(e){k=r(e,"IMG",{align:!0,style:!0,src:!0}),G=o(e),P=r(e,"P",{});var n=p(P);pe=u(n,"Java’da swing ile birden fazla pencere kullanan herkesin aklına “bir pencereden diğerini nasıl kontrol edebilirim” sorusu gelmiştir her halde. Bu yazıda bunu örneklemeye çalışacağım. Birbiri ile bağlantılı 3 pencere olacak projemizde. Bunları ana pencere, çocuk pencere ve torun pencere olarak isimlendirelim. Tahmin edebileceğiniz gibi ana pencere’de bir butona basıldığında çocuk pencere, çocuk pencerede bir butona basıldığında torun pencere açılacak."),n.forEach(a),R=o(e),g=r(e,"P",{});var Be=p(g);te=u(Be,"Bunlara ek olarak çocuk pencereden ana pencere üzerindeki bir yazıyı değiştireceğiz. Ayrıca torun pencere üzerinden hem ana hem de çocuk pencere üzerindeki yazıları değiştireceğiz. Programın ekran görünümü aşağıdaki gibi olacak."),Be.forEach(a),X=o(e),j=r(e,"P",{});var Ie=p(j);x=r(Ie,"IMG",{src:!0}),Ie.forEach(a),Y=o(e),w=r(e,"P",{});var Ae=p(w);D=r(Ae,"IMG",{src:!0}),Ae.forEach(a),q=o(e),O=r(e,"P",{});var xe=p(O);L=r(xe,"IMG",{src:!0}),xe.forEach(a),K=o(e),f=r(e,"P",{});var ie=p(f);ce=u(ie,"Kavram kargaşasını önlemek için bir pencereyi açan pencereye, o pencerenin "),M=r(ie,"STRONG",{});var De=p(M);oe=u(De,"ata"),De.forEach(a),ue=u(ie,"sı (parent) diyelim. O halde bu örnekte ana pencere çocuk pencerenin atası, çocuk pencere de torun pencerenin atası olur."),ie.forEach(a),U=o(e),b=r(e,"P",{});var re=p(b);ke=u(re,"Java’da pencereler arası iletişimi sağlamanın en genel yolu ata pencerenin referansını çocuk pencerenin yapıcı fonksiyonuna parametre olarak vermektir. Aşağıdaki koda bakalım: "),N=r(re,"CODE",{});var Le=p(N);me=u(Le,"CocukPencere.java"),Le.forEach(a),de=u(re," sınıfından bir kod kesimi:"),re.forEach(a),F=o(e),y=r(e,"PRE",{class:!0});var Qe=p(y);Qe.forEach(a),V=o(e),S=r(e,"H3",{});var Me=p(S);fe=u(Me,"AnaPencere.java"),Me.forEach(a),W=o(e),C=r(e,"P",{});var Ne=p(C);be=u(Ne,"sınıfında çocuk pencerenin açıldığı kod kesimi:"),Ne.forEach(a),Q=o(e),v=r(e,"PRE",{class:!0});var Ze=p(v);Ze.forEach(a),Z=o(e),T=r(e,"P",{});var He=p(T);ye=u(He,"Çocuk pencereden ana pencere üzerindeki yazının değiştirildiği kod kesimi:"),He.forEach(a),$=o(e),_=r(e,"PRE",{class:!0});var $e=p(_);$e.forEach(a),h=o(e),B=r(e,"P",{});var Je=p(B);ve=u(Je,"Son olarak şunu hatırlatmakta fayda var. Bir pencererin kapama simgesine tıklanıldığında aşağıdakilerden biri yapılır."),Je.forEach(a),ee=o(e),E=r(e,"PRE",{class:!0});var he=p(E);he.forEach(a),ae=o(e),m=r(e,"P",{});var A=p(m);_e=u(A,"Bu projede Ana pencere için bu ayar "),H=r(A,"CODE",{});var Ge=p(H);Ee=u(Ge,"EXIT_ON_CLOSE"),Ge.forEach(a),ze=u(A," şeklinde. Yani ana pencere kapandığında tüm pencereler kapanıyor ve program sonlanıyor. Diğer pencereler için ise "),J=r(A,"CODE",{});var Re=p(J);Pe=u(Re,"DISPOSE"),Re.forEach(a),ge=u(A," olarak ayarlı. Pencereleri Netbeans’te çizerek oluşturuyorsanız bu ayarı properties penceresi üzerinden yapmanız gerekiyor. Eğer doğrudan kodluyorsanız ilgili kod aşağıdaki gibidir."),A.forEach(a),ne=o(e),z=r(e,"PRE",{class:!0});var ea=p(z);ea.forEach(a),se=o(e),I=r(e,"P",{});var Xe=p(I);je=u(Xe,"Umarım faydalı olmuştur, herkese iyi çalışmalar."),Xe.forEach(a),this.h()},h(){d(k,"align","left"),Ye(k,"margin-right","30px"),Ye(k,"margin-bottom","0px"),le(k.src,Oe="img/blog/logo_java.png")||d(k,"src",Oe),le(x.src,Se="img/blog/java-swing-01.png")||d(x,"src",Se),le(D.src,Ce="img/blog/java-swing-02.png")||d(D,"src",Ce),le(L.src,Te="img/blog/java-swing-03.png")||d(L,"src",Te),d(y,"class","language-java"),d(v,"class","language-java"),d(_,"class","language-java"),d(E,"class","language-undefined"),d(z,"class","language-java")},m(e,n){s(e,k,n),s(e,G,n),s(e,P,n),l(P,pe),s(e,R,n),s(e,g,n),l(g,te),s(e,X,n),s(e,j,n),l(j,x),s(e,Y,n),s(e,w,n),l(w,D),s(e,q,n),s(e,O,n),l(O,L),s(e,K,n),s(e,f,n),l(f,ce),l(f,M),l(M,oe),l(f,ue),s(e,U,n),s(e,b,n),l(b,ke),l(b,N),l(N,me),l(b,de),s(e,F,n),s(e,y,n),y.innerHTML=Ke,s(e,V,n),s(e,S,n),l(S,fe),s(e,W,n),s(e,C,n),l(C,be),s(e,Q,n),s(e,v,n),v.innerHTML=Ue,s(e,Z,n),s(e,T,n),l(T,ye),s(e,$,n),s(e,_,n),_.innerHTML=Fe,s(e,h,n),s(e,B,n),l(B,ve),s(e,ee,n),s(e,E,n),E.innerHTML=Ve,s(e,ae,n),s(e,m,n),l(m,_e),l(m,H),l(H,Ee),l(m,ze),l(m,J),l(J,Pe),l(m,ge),s(e,ne,n),s(e,z,n),z.innerHTML=We,s(e,se,n),s(e,I,n),l(I,je)},p:we,i:we,o:we,d(e){e&&a(k),e&&a(G),e&&a(P),e&&a(R),e&&a(g),e&&a(X),e&&a(j),e&&a(Y),e&&a(w),e&&a(q),e&&a(O),e&&a(K),e&&a(f),e&&a(U),e&&a(b),e&&a(F),e&&a(y),e&&a(V),e&&a(S),e&&a(W),e&&a(C),e&&a(Q),e&&a(v),e&&a(Z),e&&a(T),e&&a($),e&&a(_),e&&a(h),e&&a(B),e&&a(ee),e&&a(E),e&&a(ae),e&&a(m),e&&a(ne),e&&a(z),e&&a(se),e&&a(I)}}}const la={title:"Java Swing Pencereler Arası İletişim",date:"2012-02-27",subtitle:"Java’da swing ile birden fazla pencere kullanan herkesin aklına “bir pencereden diğerini nasıl kontrol edebilirim” sorusu gelmiştir her halde. Bu yazıda bunu örneklemeye çalışacağım"};class pa extends aa{constructor(k){super(),na(this,k,null,ia,sa,{})}}export{pa as default,la as metadata};
